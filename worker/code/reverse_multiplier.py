#!/usr/bin/env python3
"""
–†–µ–≤–µ—Ä—Å–Ω—ã–π —É–º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–∏–¥–µ–æ - –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Docker API
–°–æ–∑–¥–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º "—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ"
"""

import os
import subprocess
import glob
import json
import tempfile
import shutil
import logging
import argparse
from pathlib import Path
from typing import Optional, List
import sys
from colorama import init, Fore, Style
from config import TARGET_DURATION_MINUTES, TARGET_FPS, TARGET_RESOLUTION, LOG_LEVEL, LOG_DATE_FORMAT

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–∞–º–∏"""
    class ColoredFormatter(logging.Formatter):
        COLORS = {
            'DEBUG': Fore.CYAN,
            'INFO': Fore.GREEN,
            'WARNING': Fore.YELLOW,
            'ERROR': Fore.RED,
            'CRITICAL': Fore.MAGENTA
        }
        
        def format(self, record):
            color = self.COLORS.get(record.levelname, '')
            record.levelname = f"{color}{record.levelname}{Style.RESET_ALL}"
            return super().format(record)
    
    logger = logging.getLogger('VideoMultiplier')
    logger.setLevel(getattr(logging, LOG_LEVEL))
    
    if not logger.handlers:
        handler = logging.StreamHandler()
        formatter = ColoredFormatter(f"{Fore.WHITE}%(asctime)s{Style.RESET_ALL} - %(name)s - %(levelname)s - %(message)s", LOG_DATE_FORMAT)
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    
    return logger

logger = setup_logging()

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ FFmpeg"""
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def check_nvenc_support():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É NVENC"""
    try:
        result = subprocess.run([
            'ffmpeg', '-hide_banner', '-encoders'
        ], capture_output=True, text=True)
        
        return 'h264_nvenc' in result.stdout
    except:
        return False

def get_video_duration(filename: str) -> Optional[float]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å –ø–æ–º–æ—â—å—é FFprobe"""
    try:
        cmd = [
            'ffprobe',
            '-v', 'quiet',
            '-print_format', 'json',
            '-show_format',
            filename
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            data = json.loads(result.stdout)
            duration = float(data['format']['duration'])
            return duration
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ: {e}")
        return None

def calculate_reverse_pairs(original_duration_seconds: float, target_duration_seconds: float) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä (–æ—Ä–∏–≥–∏–Ω–∞–ª+—Ä–µ–≤–µ—Ä—Å) –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    # –í —Ä–µ–≤–µ—Ä—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ–¥–Ω–∞ –ø–∞—Ä–∞ = 2x –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    pair_duration = original_duration_seconds * 2
    repeat_count = int(target_duration_seconds / pair_duration)
    
    # –ú–∏–Ω–∏–º—É–º 1 –ø–∞—Ä–∞
    if repeat_count < 1:
        repeat_count = 1
    
    return repeat_count

def multiply_video_reverse(input_filename: str, output_file_path: str, repeat_count: int, target_fps: int):
    """–†–µ–≤–µ—Ä—Å–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ: [–û—Ä–∏–≥–∏–Ω–∞–ª][–†–µ–≤–µ—Ä—Å][–û—Ä–∏–≥–∏–Ω–∞–ª][–†–µ–≤–µ—Ä—Å]..."""
    
    if not os.path.exists(input_filename):
        logger.error(f"–§–∞–π–ª '{input_filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É NVENC
    nvenc_available = check_nvenc_support()
    
    if nvenc_available:
        logger.info("‚úÖ NVENC –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
        video_codec = 'h264_nvenc'
        codec_params = ['-preset', 'fast', '-crf', '23']
    else:
        logger.info("‚ö†Ô∏è  NVENC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        video_codec = 'libx264'
        codec_params = ['-preset', 'fast', '-crf', '23']
    
    logger.info(f"üîÑ –†–ï–í–ï–†–°–ù–û–ï —É–º–Ω–æ–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ: {input_filename}")
    logger.info("–°—Ö–µ–º–∞: [–û—Ä–∏–≥–∏–Ω–∞–ª][–†–µ–≤–µ—Ä—Å][–û—Ä–∏–≥–∏–Ω–∞–ª][–†–µ–≤–µ—Ä—Å]...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    temp_dir = tempfile.gettempdir()
    temp_original = os.path.join(temp_dir, f"temp_original_{os.getpid()}.mp4")
    temp_reverse = os.path.join(temp_dir, f"temp_reverse_{os.getpid()}.mp4")
    concat_file = os.path.join(temp_dir, f"concat_list_reverse_{os.getpid()}.txt")
    
    try:
        logger.info(f"–°–æ–∑–¥–∞–µ–º {repeat_count} –ø–∞—Ä (–æ—Ä–∏–≥–∏–Ω–∞–ª+—Ä–µ–≤–µ—Ä—Å) —Å FPS {target_fps}...")
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ –ë–ï–ó –ê–£–î–ò–û
        logger.info("–®–∞–≥ 1/3: –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª...")
        original_cmd = [
            'ffmpeg',
            '-i', input_filename,
            '-vf', f'scale={TARGET_RESOLUTION}:force_original_aspect_ratio=increase,crop={TARGET_RESOLUTION}',
            '-c:v', video_codec,
        ] + codec_params + [
            '-an',  # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É
            '-y',
            temp_original
        ]
        
        result = subprocess.run(original_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {result.stderr}")
            return False
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Ä–µ–≤–µ—Ä—Å –ë–ï–ó –ê–£–î–ò–û
        logger.info("–®–∞–≥ 2/3: –°–æ–∑–¥–∞–µ–º —Ä–µ–≤–µ—Ä—Å–Ω—É—é –≤–µ—Ä—Å–∏—é...")
        reverse_cmd = [
            'ffmpeg',
            '-i', temp_original,
            '-vf', 'reverse',
            '-c:v', video_codec,
        ] + codec_params + [
            '-an',  # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É
            '-y',
            temp_reverse
        ]
        
        result = subprocess.run(reverse_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≤–µ—Ä—Å–∞: {result.stderr}")
            return False
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è
        logger.info("–®–∞–≥ 3/3: –°–∫–ª–µ–∏–≤–∞–µ–º –ø–∞—Ä—ã...")
        
        abs_temp_original = os.path.abspath(temp_original)
        abs_temp_reverse = os.path.abspath(temp_reverse)
        
        with open(concat_file, 'w', encoding='utf-8') as f:
            for i in range(repeat_count):
                escaped_original = abs_temp_original.replace('\\', '/').replace("'", "\\'")
                escaped_reverse = abs_temp_reverse.replace('\\', '/').replace("'", "\\'")
                f.write(f"file '{escaped_original}'\n")
                f.write(f"file '{escaped_reverse}'\n")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–ª–µ–π–∫–∞
        ffmpeg_cmd = [
            'ffmpeg',
            '-f', 'concat',
            '-safe', '0',
            '-i', concat_file,
            '-r', str(target_fps),
            '-c:v', video_codec,
        ] + codec_params + [
            '-an',  # –£–±–∏—Ä–∞–µ–º –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É
            '-movflags', '+faststart',
            '-y',
            output_file_path
        ]
        
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–∫–ª–µ–π–∫—É...")
        result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_file_path}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        return False
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file in [temp_original, temp_reverse, concat_file]:
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≤–µ—Ä—Å–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ"""
    parser = argparse.ArgumentParser(description="–†–µ–≤–µ—Ä—Å–Ω—ã–π —É–º–Ω–æ–∂–∏—Ç–µ–ª—å –≤–∏–¥–µ–æ (Docker –≤–µ—Ä—Å–∏—è)")
    parser.add_argument("--input", required=True, help="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É")
    parser.add_argument("--duration", type=float, required=True, help="–¶–µ–ª–µ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("--fps", type=int, default=TARGET_FPS, help="–¶–µ–ª–µ–≤–æ–π FPS")
    parser.add_argument("--output", required=True, help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É")
    
    args = parser.parse_args()
    
    if not check_ffmpeg():
        logger.error("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return 1
    
    if not Path(args.input).exists():
        logger.error(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input}")
        return 1
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    original_duration = get_video_duration(args.input)
    if original_duration is None:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ")
        return 1
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    repeat_count = calculate_reverse_pairs(original_duration, args.duration)
    
    logger.info(f"–°–æ–∑–¥–∞–µ–º {repeat_count} –ø–∞—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {args.duration:.1f} —Å–µ–∫")
    
    success = multiply_video_reverse(
        input_filename=args.input,
        output_file_path=args.output,
        repeat_count=repeat_count,
        target_fps=args.fps
    )
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
