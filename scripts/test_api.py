#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Fast Video Builder API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö endpoints
"""

import os
import sys
import time
import requests
import json
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = os.getenv("API_URL", "http://localhost:8000")
TEST_FILES_DIR = Path(__file__).parent / "test_files"

def create_test_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API"""
    TEST_FILES_DIR.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
    test_video = TEST_FILES_DIR / "test_video.mp4"
    if not test_video.exists():
        print("üìπ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
        os.system(f"""
        ffmpeg -f lavfi -i testsrc=duration=5:size=320x240:rate=30 \
               -f lavfi -i sine=frequency=1000:duration=5 \
               -c:v libx264 -c:a aac -shortest -y {test_video}
        """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = TEST_FILES_DIR / "test_image.png"
    if not test_image.exists():
        print("üñºÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        os.system(f"""
        ffmpeg -f lavfi -i color=blue:size=100x100:duration=1 \
               -frames:v 1 -y {test_image}
        """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
    test_audio = TEST_FILES_DIR / "test_audio.mp3"
    if not test_audio.exists():
        print("üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ...")
        os.system(f"""
        ffmpeg -f lavfi -i sine=frequency=440:duration=3 \
               -c:a mp3 -y {test_audio}
        """)
    
    return test_video, test_image, test_audio

def check_api_health() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {health_data['status']}")
            print(f"   Redis: {health_data['services']['redis']}")
            print(f"   MinIO: {health_data['services']['minio']}")
            return health_data['status'] == 'healthy'
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def check_queue_stats():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/v1/queue/stats", timeout=10)
        if response.status_code == 200:
            stats = response.json()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}")
            print(f"   –í –æ—á–µ—Ä–µ–¥–∏: {stats['queued_tasks']}")
            print(f"   –í–æ—Ä–∫–µ—Ä–æ–≤: {len(stats['workers'])}")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def create_test_video_job() -> Optional[str]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ"""
    try:
        test_video, test_image, test_audio = create_test_files()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        if not all([test_video.exists(), test_image.exists(), test_audio.exists()]):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
            return None
        
        print("üöÄ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            'video': open(test_video, 'rb'),
            'bg_audio': open(test_audio, 'rb'),
            'bg_image': open(test_image, 'rb')
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏
        data = {
            'text': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Fast Video Builder API. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
            'voice': 'am_santa',
            'speed': 0.8,
            'target_duration_minutes': 2,  # –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            'target_fps': 16,
            'bg_volume': 0.2
        }
        
        response = requests.post(
            f"{API_BASE_URL}/api/v1/video/create",
            files=files,
            data=data,
            timeout=30
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file in files.values():
            file.close()
        
        if response.status_code == 200:
            job_data = response.json()
            job_id = job_data['job_id']
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {job_id}")
            print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {job_data['estimated_time_minutes']} –º–∏–Ω—É—Ç")
            return job_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: HTTP {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return None

def wait_for_job_completion(job_id: str, max_wait_minutes: int = 10) -> bool:
    """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {job_id}...")
    
    start_time = time.time()
    max_wait_seconds = max_wait_minutes * 60
    
    while time.time() - start_time < max_wait_seconds:
        try:
            response = requests.get(f"{API_BASE_URL}/api/v1/video/{job_id}/status", timeout=10)
            
            if response.status_code == 200:
                status_data = response.json()
                status = status_data['status']
                
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                
                if status == 'success' or status == 'completed':
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    if 'download_url' in status_data:
                        print(f"   üì• –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {status_data['download_url']}")
                    if 'result' in status_data and 'video_info' in status_data['result']:
                        info = status_data['result']['video_info']
                        print(f"   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:")
                        print(f"      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info.get('duration', 0):.1f} —Å–µ–∫")
                        print(f"      –†–∞–∑–º–µ—Ä: {info.get('size_mb', 0):.1f} –ú–ë")
                        print(f"      –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {info.get('width', 0)}x{info.get('height', 0)}")
                    return True
                    
                elif status == 'failed' or status == 'failure':
                    print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    if 'error' in status_data:
                        print(f"   –û—à–∏–±–∫–∞: {status_data['error']}")
                    return False
                    
                elif status == 'progress':
                    if 'result' in status_data and 'stage' in status_data['result']:
                        stage = status_data['result']['stage']
                        progress = status_data['result'].get('progress', 0)
                        print(f"   –≠—Ç–∞–ø: {stage} ({progress}%)")
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(10)
                
            else:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status_code}")
                time.sleep(5)
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            time.sleep(5)
    
    print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait_minutes} –º–∏–Ω—É—Ç)")
    return False

def test_download_endpoint(job_id: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/v1/video/{job_id}/download", timeout=10, allow_redirects=False)
        
        if response.status_code == 302:
            print(f"‚úÖ Endpoint —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)")
            print(f"   –°—Å—ã–ª–∫–∞: {response.headers.get('Location', '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')}")
            return True
        elif response.status_code == 404:
            print(f"‚ö†Ô∏è –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ endpoint —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return False

def cleanup_test_files():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        if TEST_FILES_DIR.exists():
            import shutil
            shutil.rmtree(TEST_FILES_DIR)
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ Fast Video Builder API - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    if os.system("ffmpeg -version > /dev/null 2>&1") != 0:
        print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
        return 1
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API")
    if not check_api_health():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
        return 1
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á")
    check_queue_stats()
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    job_id = create_test_video_job()
    if not job_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É")
        return 1
    
    # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    success = wait_for_job_completion(job_id, max_wait_minutes=15)
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    if success:
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        test_download_endpoint(job_id)
    
    # 6. –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    print("\n6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞")
    cleanup_test_files()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Fast Video Builder API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose logs")
        return 1

if __name__ == "__main__":
    sys.exit(main())
