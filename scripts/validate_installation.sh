#!/bin/bash
# –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Fast Video Builder

set -e

echo "üîç Fast Video Builder - –í–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
echo "==========================================="

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –°—á–µ—Ç—á–∏–∫–∏
TESTS_TOTAL=0
TESTS_PASSED=0
TESTS_FAILED=0

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_command() {
    local name="$1"
    local command="$2"
    local expected="$3"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    echo -n "  Testing $name... "
    
    if eval "$command" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

test_file() {
    local name="$1"
    local file="$2"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    echo -n "  Checking $name... "
    
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC} (not found: $file)"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

test_directory() {
    local name="$1"
    local dir="$2"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    echo -n "  Checking $name... "
    
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úì${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC} (not found: $dir)"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

test_service() {
    local name="$1"
    local service="$2"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    
    echo -n "  Testing $name... "
    
    if docker-compose ps | grep -q "$service.*Up"; then
        echo -e "${GREEN}‚úì${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
        return 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ —Å Fast Video Builder"
    exit 1
fi

echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
echo "=================================="

test_command "Docker" "docker --version"
test_command "Docker Compose" "docker-compose --version"
test_command "FFmpeg" "ffmpeg -version"
test_command "Python 3" "python3 --version"
test_command "curl" "curl --version"
test_command "wget" "wget --version"

echo ""
echo "üéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU"
echo "==============="

if command -v nvidia-smi >/dev/null 2>&1; then
    test_command "NVIDIA GPU" "nvidia-smi"
    test_command "NVIDIA Docker" "docker run --rm --gpus all nvidia/cuda:11.8-runtime-ubuntu22.04 nvidia-smi"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
    echo ""
    echo "  GPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
    nvidia-smi --query-gpu=name,memory.total,driver_version --format=csv,noheader | while read line; do
        echo "    $line"
    done
else
    echo -e "  ${YELLOW}‚ö† NVIDIA GPU –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

echo ""
echo "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
echo "=============================="

test_directory "API –ø–∞–ø–∫–∞" "api"
test_directory "Worker –ø–∞–ø–∫–∞" "worker"
test_directory "Scripts –ø–∞–ø–∫–∞" "scripts"
test_directory "Nginx –ø–∞–ø–∫–∞" "nginx"

test_file "Docker Compose" "docker-compose.yml"
test_file "Environment example" "env.example"
test_file "API Dockerfile" "api/Dockerfile"
test_file "Worker Dockerfile" "worker/Dockerfile"
test_file "API main.py" "api/main.py"
test_file "Worker main" "worker/worker.py"

echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤"
echo "==================="

test_file "Setup script" "scripts/setup.sh"
test_file "Start script" "scripts/start.sh"
test_file "Monitor script" "scripts/monitor.sh"
test_file "Test script" "scripts/test_api.py"
test_file "Install script" "install.sh"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
for script in scripts/*.sh install.sh; do
    if [ -f "$script" ]; then
        if [ -x "$script" ]; then
            echo -e "  ${GREEN}‚úì${NC} $script executable"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            echo -e "  ${RED}‚úó${NC} $script not executable"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
        TESTS_TOTAL=$((TESTS_TOTAL + 1))
    fi
done

echo ""
echo "‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
echo "======================="

if [ -f ".env" ]; then
    test_file "Environment file" ".env"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    echo "  Checking environment variables:"
    
    source .env 2>/dev/null || true
    
    vars=("REDIS_URL" "MINIO_ROOT_USER" "API_PORT" "WORKER_REPLICAS")
    for var in "${vars[@]}"; do
        if [ -n "${!var}" ]; then
            echo -e "    ${GREEN}‚úì${NC} $var=${!var}"
        else
            echo -e "    ${RED}‚úó${NC} $var not set"
        fi
    done
else
    echo -e "  ${YELLOW}‚ö† .env file not found (will use defaults)${NC}"
fi

echo ""
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"
echo "========================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
images=("redis:7-alpine" "minio/minio:latest")
for image in "${images[@]}"; do
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "  Checking $image... "
    
    if docker images | grep -q "${image%:*}"; then
        echo -e "${GREEN}‚úì${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${YELLOW}‚ö†${NC} (will be pulled on start)"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã
if docker images | grep -q "fast.*video.*builder"; then
    echo -e "  ${GREEN}‚úì${NC} Custom images built"
else
    echo -e "  ${YELLOW}‚ö†${NC} Custom images not built (run docker-compose build)"
fi

echo ""
echo "üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã)"
echo "==================================="

if docker-compose ps >/dev/null 2>&1; then
    services=("redis" "minio" "api" "worker")
    
    for service in "${services[@]}"; do
        test_service "$service service" "$service"
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -n "  Testing API endpoint... "
    
    if curl -s http://localhost:8000/health >/dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC}"
        TESTS_PASSED=$((TESTS_PASSED + 1))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å API
        api_status=$(curl -s http://localhost:8000/health | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('status', 'unknown'))" 2>/dev/null || echo "unknown")
        echo "    API Status: $api_status"
        
    else
        echo -e "${RED}‚úó${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
    
else
    echo -e "  ${YELLOW}‚ö† Services not running${NC}"
    echo "  Run './scripts/start.sh' to start services"
fi

echo ""
echo "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
echo "======================"

echo "  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TESTS_TOTAL"
echo -e "  –ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$TESTS_PASSED${NC}"
echo -e "  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo -e "${GREEN}‚úÖ Fast Video Builder –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ${NC}"
    
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: ./scripts/start.sh"
    echo "  2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API: python3 scripts/test_api.py"
    echo "  3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs"
    
    exit 0
else
    echo ""
    echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ${NC}"
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:"
    
    if [ $TESTS_FAILED -gt 5 ]; then
        echo "  - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É: ./install.sh"
    else
        echo "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        echo "  - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: ./scripts/setup.sh"
    fi
    
    echo "  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs"
    echo "  - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: README.md"
    
    exit 1
fi
